// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xstudio_model.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Xstudio.Proto {

  /// <summary>Holder for reflection information generated from xstudio_model.proto</summary>
  public static partial class XstudioModelReflection {

    #region Descriptor
    /// <summary>File descriptor for xstudio_model.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XstudioModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChN4c3R1ZGlvX21vZGVsLnByb3RvEg14c3R1ZGlvLnByb3RvGhlnb29nbGUv",
            "cHJvdG9idWYvYW55LnByb3RvIpMECghBcHBNb2RlbBIeChFwcm9qZWN0X2Zp",
            "bGVfcGF0aBgBIAEoCUgAiAEBEhQKB3ZlcnNpb24YAiABKAlIAYgBARIVCghk",
            "dXJhdGlvbhgDIAEoBUgCiAEBEiwKCnRlbXBvX2xpc3QYBCADKAsyGC54c3R1",
            "ZGlvLnByb3RvLlNvbmdUZW1wbxIqCgliZWF0X2xpc3QYBSADKAsyFy54c3R1",
            "ZGlvLnByb3RvLlNvbmdCZWF0EigKCnRyYWNrX2xpc3QYBiADKAsyFC5nb29n",
            "bGUucHJvdG9idWYuQW55EioKBm1hc3RlchgHIAEoCzIVLnhzdHVkaW8ucHJv",
            "dG8uTWFzdGVySAOIAQESGQoMY3VycmVudF90b25lGAggASgJSASIAQESGAoL",
            "cGlhbm9fY2VsbHMYCSABKAVIBYgBARIXCgpsb29wX3N0YXJ0GAogASgFSAaI",
            "AQESFQoIbG9vcF9lbmQYCyABKAVIB4gBARIbCg5pc19vcGVuX2Fkc29yYhgM",
            "IAEoCEgIiAEBQhQKEl9wcm9qZWN0X2ZpbGVfcGF0aEIKCghfdmVyc2lvbkIL",
            "CglfZHVyYXRpb25CCQoHX21hc3RlckIPCg1fY3VycmVudF90b25lQg4KDF9w",
            "aWFub19jZWxsc0INCgtfbG9vcF9zdGFydEILCglfbG9vcF9lbmRCEQoPX2lz",
            "X29wZW5fYWRzb3JiIkMKCVNvbmdUZW1wbxIQCgNwb3MYASABKAVIAIgBARIS",
            "CgV0ZW1wbxgCIAEoBUgBiAEBQgYKBF9wb3NCCAoGX3RlbXBvImMKCFNvbmdC",
            "ZWF0EhAKA3BvcxgBIAEoBUgAiAEBEi8KCWJlYXRfc2l6ZRgCIAEoCzIXLnhz",
            "dHVkaW8ucHJvdG8uQmVhdFNpemVIAYgBAUIGCgRfcG9zQgwKCl9iZWF0X3Np",
            "emUiWgoIQmVhdFNpemUSFgoJbnVtZXJhdG9yGAEgASgFSACIAQESGAoLZGVu",
            "b21pbmF0b3IYAiABKAVIAYgBAUIMCgpfbnVtZXJhdG9yQg4KDF9kZW5vbWlu",
            "YXRvciIoCgZNYXN0ZXISEwoGdm9sdW1lGAEgASgCSACIAQFCCQoHX3ZvbHVt",
            "ZSLRAgoMU2luZ2luZ1RyYWNrEhMKBnZvbHVtZRgBIAEoAkgAiAEBEhAKA3Bh",
            "bhgCIAEoAkgBiAEBEhEKBG11dGUYAyABKAhIAogBARIRCgRuYW1lGAQgASgJ",
            "SAOIAQESEQoEc29sbxgFIAEoCEgEiAEBEhIKBWNvbG9yGAYgASgJSAWIAQES",
            "KwoEdHlwZRgHIAEoDjIYLnhzdHVkaW8ucHJvdG8uVHJhY2tUeXBlSAaIAQES",
            "MwoMcGF0dGVybl9saXN0GAggAygLMh0ueHN0dWRpby5wcm90by5TaW5naW5n",
            "UGF0dGVybhIZCgxhaV9zaW5nZXJfaWQYCSABKAlIB4gBAUIJCgdfdm9sdW1l",
            "QgYKBF9wYW5CBwoFX211dGVCBwoFX25hbWVCBwoFX3NvbG9CCAoGX2NvbG9y",
            "QgcKBV90eXBlQg8KDV9haV9zaW5nZXJfaWQioQIKCkF1ZGlvVHJhY2sSEwoG",
            "dm9sdW1lGAEgASgCSACIAQESEAoDcGFuGAIgASgCSAGIAQESEQoEbXV0ZRgD",
            "IAEoCEgCiAEBEhEKBG5hbWUYBCABKAlIA4gBARIRCgRzb2xvGAUgASgISASI",
            "AQESEgoFY29sb3IYBiABKAlIBYgBARIrCgR0eXBlGAcgASgOMhgueHN0dWRp",
            "by5wcm90by5UcmFja1R5cGVIBogBARIxCgxwYXR0ZXJuX2xpc3QYCCADKAsy",
            "Gy54c3R1ZGlvLnByb3RvLkF1ZGlvUGF0dGVybkIJCgdfdm9sdW1lQgYKBF9w",
            "YW5CBwoFX211dGVCBwoFX25hbWVCBwoFX3NvbG9CCAoGX2NvbG9yQgcKBV90",
            "eXBlIsYCCgxBdWRpb1BhdHRlcm4SEQoEbmFtZRgBIAEoCUgAiAEBEi0KBHR5",
            "cGUYAiABKA4yGi54c3R1ZGlvLnByb3RvLlBhdHRlcm5UeXBlSAGIAQESFQoI",
            "cmVhbF9wb3MYAyABKAVIAogBARIVCghyZWFsX2R1chgEIAEoBUgDiAEBEhUK",
            "CHBsYXlfcG9zGAUgASgFSASIAQESFQoIcGxheV9kdXIYBiABKAVIBYgBARIU",
            "Cgdpc19tdXRlGAcgASgISAaIAQESHAoPYXVkaW9fZmlsZV9wYXRoGAggASgJ",
            "SAeIAQFCBwoFX25hbWVCBwoFX3R5cGVCCwoJX3JlYWxfcG9zQgsKCV9yZWFs",
            "X2R1ckILCglfcGxheV9wb3NCCwoJX3BsYXlfZHVyQgoKCF9pc19tdXRlQhIK",
            "EF9hdWRpb19maWxlX3BhdGgi6gMKDlNpbmdpbmdQYXR0ZXJuEhEKBG5hbWUY",
            "ASABKAlIAIgBARItCgR0eXBlGAIgASgOMhoueHN0dWRpby5wcm90by5QYXR0",
            "ZXJuVHlwZUgBiAEBEhUKCHJlYWxfcG9zGAMgASgFSAKIAQESFQoIcmVhbF9k",
            "dXIYBCABKAVIA4gBARIVCghwbGF5X3BvcxgFIAEoBUgEiAEBEhUKCHBsYXlf",
            "ZHVyGAYgASgFSAWIAQESFAoHaXNfbXV0ZRgHIAEoCEgGiAEBEiYKCW5vdGVf",
            "TGlzdBgIIAMoCzITLnhzdHVkaW8ucHJvdG8uTm90ZRI3ChFlZGl0ZWRfcGl0",
            "Y2hfbGluZRgJIAMoCzIcLnhzdHVkaW8ucHJvdG8uTGluZVBhcmFtTm9kZRI4",
            "ChJlZGl0ZWRfdm9sdW1lX2xpbmUYCiADKAsyHC54c3R1ZGlvLnByb3RvLkxp",
            "bmVQYXJhbU5vZGUSNwoRZWRpdGVkX3Bvd2VyX2xpbmUYCyADKAsyHC54c3R1",
            "ZGlvLnByb3RvLkxpbmVQYXJhbU5vZGVCBwoFX25hbWVCBwoFX3R5cGVCCwoJ",
            "X3JlYWxfcG9zQgsKCV9yZWFsX2R1ckILCglfcGxheV9wb3NCCwoJX3BsYXlf",
            "ZHVyQgoKCF9pc19tdXRlIvYDCgROb3RlEhYKCXN0YXJ0X3BvcxgBIAEoBUgA",
            "iAEBEhYKCXdpZHRoX3BvcxgCIAEoBUgBiAEBEhYKCWtleV9pbmRleBgDIAEo",
            "BUgCiAEBEhIKBWx5cmljGAQgASgJSAOIAQESGAoLcHJvbm91bmNpbmcYBSAB",
            "KAlIBIgBARIaCg1jb25zb25hbnRfbGVuGAYgASgFSAWIAQESGgoNaGFzX2Nv",
            "bnNvbmFudBgHIAEoCEgGiAEBEh8KEnVzZXJfY29uc29uYW50X2xlbhgIIAEo",
            "BUgHiAEBEhMKBnNwX2xlbhgJIAEoBUgIiAEBEhQKB3NpbF9sZW4YCiABKAVI",
            "CYgBARJGChNsZW5ndGhfdmFsaWRhdGVfdGFnGAsgASgOMiQueHN0dWRpby5w",
            "cm90by5Ob3RlTGVuZ3RoVmFsaWRhdGVUYWdICogBAUIMCgpfc3RhcnRfcG9z",
            "QgwKCl93aWR0aF9wb3NCDAoKX2tleV9pbmRleEIICgZfbHlyaWNCDgoMX3By",
            "b25vdW5jaW5nQhAKDl9jb25zb25hbnRfbGVuQhAKDl9oYXNfY29uc29uYW50",
            "QhUKE191c2VyX2NvbnNvbmFudF9sZW5CCQoHX3NwX2xlbkIKCghfc2lsX2xl",
            "bkIWChRfbGVuZ3RoX3ZhbGlkYXRlX3RhZyKdAQoMVmlicmF0b1N0eWxlEhoK",
            "DWlzX2FudGlfcGhhc2UYASABKAhIAIgBARIuCghhbXBfbGluZRgCIAMoCzIc",
            "LnhzdHVkaW8ucHJvdG8uTGluZVBhcmFtTm9kZRIvCglmcmVxX2xpbmUYAyAD",
            "KAsyHC54c3R1ZGlvLnByb3RvLkxpbmVQYXJhbU5vZGVCEAoOX2lzX2FudGlf",
            "cGhhc2UibAoSVmlicmF0b1BlcmNlbnRJbmZvEhoKDXN0YXJ0X3BlcmNlbnQY",
            "ASABKAJIAIgBARIYCgtlbmRfcGVyY2VudBgCIAEoAkgBiAEBQhAKDl9zdGFy",
            "dF9wZXJjZW50Qg4KDF9lbmRfcGVyY2VudCJHCg1MaW5lUGFyYW1Ob2RlEhAK",
            "A3BvcxgBIAEoEUgAiAEBEhIKBXZhbHVlGAIgASgCSAGIAQFCBgoEX3Bvc0II",
            "CgZfdmFsdWUqPwoJVHJhY2tUeXBlEg4KClRyYWNrX05vbmUQABIPCgtBdWRp",
            "b19UcmFjaxABEhEKDVNpbmdpbmdfVHJhY2sQAipHCgtQYXR0ZXJuVHlwZRIQ",
            "CgxQYXR0ZXJuX05vbmUQABIRCg1BdWRpb19QYXR0ZXJuEAESEwoPU2luZ2lu",
            "Z19QYXR0ZXJuEAIqPgoVTm90ZUxlbmd0aFZhbGlkYXRlVGFnEggKBE5PTkUQ",
            "ABIMCghUT09fTE9ORxABEg0KCVRPT19TSE9SVBACYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Xstudio.Proto.TrackType), typeof(global::Xstudio.Proto.PatternType), typeof(global::Xstudio.Proto.NoteLengthValidateTag), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Xstudio.Proto.AppModel), global::Xstudio.Proto.AppModel.Parser, new[]{ "ProjectFilePath", "Version", "Duration", "TempoList", "BeatList", "TrackList", "Master", "CurrentTone", "PianoCells", "LoopStart", "LoopEnd", "IsOpenAdsorb" }, new[]{ "ProjectFilePath", "Version", "Duration", "Master", "CurrentTone", "PianoCells", "LoopStart", "LoopEnd", "IsOpenAdsorb" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xstudio.Proto.SongTempo), global::Xstudio.Proto.SongTempo.Parser, new[]{ "Pos", "Tempo" }, new[]{ "Pos", "Tempo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xstudio.Proto.SongBeat), global::Xstudio.Proto.SongBeat.Parser, new[]{ "Pos", "BeatSize" }, new[]{ "Pos", "BeatSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xstudio.Proto.BeatSize), global::Xstudio.Proto.BeatSize.Parser, new[]{ "Numerator", "Denominator" }, new[]{ "Numerator", "Denominator" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xstudio.Proto.Master), global::Xstudio.Proto.Master.Parser, new[]{ "Volume" }, new[]{ "Volume" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xstudio.Proto.SingingTrack), global::Xstudio.Proto.SingingTrack.Parser, new[]{ "Volume", "Pan", "Mute", "Name", "Solo", "Color", "Type", "PatternList", "AiSingerId" }, new[]{ "Volume", "Pan", "Mute", "Name", "Solo", "Color", "Type", "AiSingerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xstudio.Proto.AudioTrack), global::Xstudio.Proto.AudioTrack.Parser, new[]{ "Volume", "Pan", "Mute", "Name", "Solo", "Color", "Type", "PatternList" }, new[]{ "Volume", "Pan", "Mute", "Name", "Solo", "Color", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xstudio.Proto.AudioPattern), global::Xstudio.Proto.AudioPattern.Parser, new[]{ "Name", "Type", "RealPos", "RealDur", "PlayPos", "PlayDur", "IsMute", "AudioFilePath" }, new[]{ "Name", "Type", "RealPos", "RealDur", "PlayPos", "PlayDur", "IsMute", "AudioFilePath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xstudio.Proto.SingingPattern), global::Xstudio.Proto.SingingPattern.Parser, new[]{ "Name", "Type", "RealPos", "RealDur", "PlayPos", "PlayDur", "IsMute", "NoteList", "EditedPitchLine", "EditedVolumeLine", "EditedPowerLine" }, new[]{ "Name", "Type", "RealPos", "RealDur", "PlayPos", "PlayDur", "IsMute" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xstudio.Proto.Note), global::Xstudio.Proto.Note.Parser, new[]{ "StartPos", "WidthPos", "KeyIndex", "Lyric", "Pronouncing", "ConsonantLen", "HasConsonant", "UserConsonantLen", "SpLen", "SilLen", "LengthValidateTag" }, new[]{ "StartPos", "WidthPos", "KeyIndex", "Lyric", "Pronouncing", "ConsonantLen", "HasConsonant", "UserConsonantLen", "SpLen", "SilLen", "LengthValidateTag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xstudio.Proto.VibratoStyle), global::Xstudio.Proto.VibratoStyle.Parser, new[]{ "IsAntiPhase", "AmpLine", "FreqLine" }, new[]{ "IsAntiPhase" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xstudio.Proto.VibratoPercentInfo), global::Xstudio.Proto.VibratoPercentInfo.Parser, new[]{ "StartPercent", "EndPercent" }, new[]{ "StartPercent", "EndPercent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xstudio.Proto.LineParamNode), global::Xstudio.Proto.LineParamNode.Parser, new[]{ "Pos", "Value" }, new[]{ "Pos", "Value" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum TrackType {
    [pbr::OriginalName("Track_None")] TrackNone = 0,
    [pbr::OriginalName("Audio_Track")] AudioTrack = 1,
    [pbr::OriginalName("Singing_Track")] SingingTrack = 2,
  }

  public enum PatternType {
    [pbr::OriginalName("Pattern_None")] PatternNone = 0,
    [pbr::OriginalName("Audio_Pattern")] AudioPattern = 1,
    [pbr::OriginalName("Singing_Pattern")] SingingPattern = 2,
  }

  public enum NoteLengthValidateTag {
    [pbr::OriginalName("NONE")] None = 0,
    [pbr::OriginalName("TOO_LONG")] TooLong = 1,
    [pbr::OriginalName("TOO_SHORT")] TooShort = 2,
  }

  #endregion

  #region Messages
  public sealed partial class AppModel : pb::IMessage<AppModel>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AppModel> _parser = new pb::MessageParser<AppModel>(() => new AppModel());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AppModel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xstudio.Proto.XstudioModelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AppModel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AppModel(AppModel other) : this() {
      _hasBits0 = other._hasBits0;
      projectFilePath_ = other.projectFilePath_;
      version_ = other.version_;
      duration_ = other.duration_;
      tempoList_ = other.tempoList_.Clone();
      beatList_ = other.beatList_.Clone();
      trackList_ = other.trackList_.Clone();
      master_ = other.master_ != null ? other.master_.Clone() : null;
      currentTone_ = other.currentTone_;
      pianoCells_ = other.pianoCells_;
      loopStart_ = other.loopStart_;
      loopEnd_ = other.loopEnd_;
      isOpenAdsorb_ = other.isOpenAdsorb_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AppModel Clone() {
      return new AppModel(this);
    }

    /// <summary>Field number for the "project_file_path" field.</summary>
    public const int ProjectFilePathFieldNumber = 1;
    private string projectFilePath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ProjectFilePath {
      get { return projectFilePath_ ?? ""; }
      set {
        projectFilePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "project_file_path" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProjectFilePath {
      get { return projectFilePath_ != null; }
    }
    /// <summary>Clears the value of the "project_file_path" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProjectFilePath() {
      projectFilePath_ = null;
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private string version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Version {
      get { return version_ ?? ""; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVersion {
      get { return version_ != null; }
    }
    /// <summary>Clears the value of the "version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVersion() {
      version_ = null;
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 3;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Duration {
      get { if ((_hasBits0 & 1) != 0) { return duration_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        duration_ = value;
      }
    }
    /// <summary>Gets whether the "duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDuration {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDuration() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "tempo_list" field.</summary>
    public const int TempoListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Xstudio.Proto.SongTempo> _repeated_tempoList_codec
        = pb::FieldCodec.ForMessage(34, global::Xstudio.Proto.SongTempo.Parser);
    private readonly pbc::RepeatedField<global::Xstudio.Proto.SongTempo> tempoList_ = new pbc::RepeatedField<global::Xstudio.Proto.SongTempo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Xstudio.Proto.SongTempo> TempoList {
      get { return tempoList_; }
    }

    /// <summary>Field number for the "beat_list" field.</summary>
    public const int BeatListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Xstudio.Proto.SongBeat> _repeated_beatList_codec
        = pb::FieldCodec.ForMessage(42, global::Xstudio.Proto.SongBeat.Parser);
    private readonly pbc::RepeatedField<global::Xstudio.Proto.SongBeat> beatList_ = new pbc::RepeatedField<global::Xstudio.Proto.SongBeat>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Xstudio.Proto.SongBeat> BeatList {
      get { return beatList_; }
    }

    /// <summary>Field number for the "track_list" field.</summary>
    public const int TrackListFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Google.Protobuf.WellKnownTypes.Any> _repeated_trackList_codec
        = pb::FieldCodec.ForMessage(50, global::Google.Protobuf.WellKnownTypes.Any.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Any> trackList_ = new pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Any>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Any> TrackList {
      get { return trackList_; }
    }

    /// <summary>Field number for the "master" field.</summary>
    public const int MasterFieldNumber = 7;
    private global::Xstudio.Proto.Master master_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Xstudio.Proto.Master Master {
      get { return master_; }
      set {
        master_ = value;
      }
    }

    /// <summary>Field number for the "current_tone" field.</summary>
    public const int CurrentToneFieldNumber = 8;
    private string currentTone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CurrentTone {
      get { return currentTone_ ?? ""; }
      set {
        currentTone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "current_tone" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurrentTone {
      get { return currentTone_ != null; }
    }
    /// <summary>Clears the value of the "current_tone" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurrentTone() {
      currentTone_ = null;
    }

    /// <summary>Field number for the "piano_cells" field.</summary>
    public const int PianoCellsFieldNumber = 9;
    private int pianoCells_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PianoCells {
      get { if ((_hasBits0 & 2) != 0) { return pianoCells_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        pianoCells_ = value;
      }
    }
    /// <summary>Gets whether the "piano_cells" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPianoCells {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "piano_cells" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPianoCells() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "loop_start" field.</summary>
    public const int LoopStartFieldNumber = 10;
    private int loopStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LoopStart {
      get { if ((_hasBits0 & 4) != 0) { return loopStart_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        loopStart_ = value;
      }
    }
    /// <summary>Gets whether the "loop_start" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLoopStart {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "loop_start" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLoopStart() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "loop_end" field.</summary>
    public const int LoopEndFieldNumber = 11;
    private int loopEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LoopEnd {
      get { if ((_hasBits0 & 8) != 0) { return loopEnd_; } else { return 0; } }
      set {
        _hasBits0 |= 8;
        loopEnd_ = value;
      }
    }
    /// <summary>Gets whether the "loop_end" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLoopEnd {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "loop_end" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLoopEnd() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "is_open_adsorb" field.</summary>
    public const int IsOpenAdsorbFieldNumber = 12;
    private bool isOpenAdsorb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsOpenAdsorb {
      get { if ((_hasBits0 & 16) != 0) { return isOpenAdsorb_; } else { return false; } }
      set {
        _hasBits0 |= 16;
        isOpenAdsorb_ = value;
      }
    }
    /// <summary>Gets whether the "is_open_adsorb" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsOpenAdsorb {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "is_open_adsorb" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsOpenAdsorb() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AppModel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AppModel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectFilePath != other.ProjectFilePath) return false;
      if (Version != other.Version) return false;
      if (Duration != other.Duration) return false;
      if(!tempoList_.Equals(other.tempoList_)) return false;
      if(!beatList_.Equals(other.beatList_)) return false;
      if(!trackList_.Equals(other.trackList_)) return false;
      if (!object.Equals(Master, other.Master)) return false;
      if (CurrentTone != other.CurrentTone) return false;
      if (PianoCells != other.PianoCells) return false;
      if (LoopStart != other.LoopStart) return false;
      if (LoopEnd != other.LoopEnd) return false;
      if (IsOpenAdsorb != other.IsOpenAdsorb) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasProjectFilePath) hash ^= ProjectFilePath.GetHashCode();
      if (HasVersion) hash ^= Version.GetHashCode();
      if (HasDuration) hash ^= Duration.GetHashCode();
      hash ^= tempoList_.GetHashCode();
      hash ^= beatList_.GetHashCode();
      hash ^= trackList_.GetHashCode();
      if (master_ != null) hash ^= Master.GetHashCode();
      if (HasCurrentTone) hash ^= CurrentTone.GetHashCode();
      if (HasPianoCells) hash ^= PianoCells.GetHashCode();
      if (HasLoopStart) hash ^= LoopStart.GetHashCode();
      if (HasLoopEnd) hash ^= LoopEnd.GetHashCode();
      if (HasIsOpenAdsorb) hash ^= IsOpenAdsorb.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasProjectFilePath) {
        output.WriteRawTag(10);
        output.WriteString(ProjectFilePath);
      }
      if (HasVersion) {
        output.WriteRawTag(18);
        output.WriteString(Version);
      }
      if (HasDuration) {
        output.WriteRawTag(24);
        output.WriteInt32(Duration);
      }
      tempoList_.WriteTo(output, _repeated_tempoList_codec);
      beatList_.WriteTo(output, _repeated_beatList_codec);
      trackList_.WriteTo(output, _repeated_trackList_codec);
      if (master_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Master);
      }
      if (HasCurrentTone) {
        output.WriteRawTag(66);
        output.WriteString(CurrentTone);
      }
      if (HasPianoCells) {
        output.WriteRawTag(72);
        output.WriteInt32(PianoCells);
      }
      if (HasLoopStart) {
        output.WriteRawTag(80);
        output.WriteInt32(LoopStart);
      }
      if (HasLoopEnd) {
        output.WriteRawTag(88);
        output.WriteInt32(LoopEnd);
      }
      if (HasIsOpenAdsorb) {
        output.WriteRawTag(96);
        output.WriteBool(IsOpenAdsorb);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasProjectFilePath) {
        output.WriteRawTag(10);
        output.WriteString(ProjectFilePath);
      }
      if (HasVersion) {
        output.WriteRawTag(18);
        output.WriteString(Version);
      }
      if (HasDuration) {
        output.WriteRawTag(24);
        output.WriteInt32(Duration);
      }
      tempoList_.WriteTo(ref output, _repeated_tempoList_codec);
      beatList_.WriteTo(ref output, _repeated_beatList_codec);
      trackList_.WriteTo(ref output, _repeated_trackList_codec);
      if (master_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Master);
      }
      if (HasCurrentTone) {
        output.WriteRawTag(66);
        output.WriteString(CurrentTone);
      }
      if (HasPianoCells) {
        output.WriteRawTag(72);
        output.WriteInt32(PianoCells);
      }
      if (HasLoopStart) {
        output.WriteRawTag(80);
        output.WriteInt32(LoopStart);
      }
      if (HasLoopEnd) {
        output.WriteRawTag(88);
        output.WriteInt32(LoopEnd);
      }
      if (HasIsOpenAdsorb) {
        output.WriteRawTag(96);
        output.WriteBool(IsOpenAdsorb);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasProjectFilePath) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectFilePath);
      }
      if (HasVersion) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (HasDuration) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      size += tempoList_.CalculateSize(_repeated_tempoList_codec);
      size += beatList_.CalculateSize(_repeated_beatList_codec);
      size += trackList_.CalculateSize(_repeated_trackList_codec);
      if (master_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Master);
      }
      if (HasCurrentTone) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentTone);
      }
      if (HasPianoCells) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PianoCells);
      }
      if (HasLoopStart) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoopStart);
      }
      if (HasLoopEnd) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoopEnd);
      }
      if (HasIsOpenAdsorb) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AppModel other) {
      if (other == null) {
        return;
      }
      if (other.HasProjectFilePath) {
        ProjectFilePath = other.ProjectFilePath;
      }
      if (other.HasVersion) {
        Version = other.Version;
      }
      if (other.HasDuration) {
        Duration = other.Duration;
      }
      tempoList_.Add(other.tempoList_);
      beatList_.Add(other.beatList_);
      trackList_.Add(other.trackList_);
      if (other.master_ != null) {
        if (master_ == null) {
          Master = new global::Xstudio.Proto.Master();
        }
        Master.MergeFrom(other.Master);
      }
      if (other.HasCurrentTone) {
        CurrentTone = other.CurrentTone;
      }
      if (other.HasPianoCells) {
        PianoCells = other.PianoCells;
      }
      if (other.HasLoopStart) {
        LoopStart = other.LoopStart;
      }
      if (other.HasLoopEnd) {
        LoopEnd = other.LoopEnd;
      }
      if (other.HasIsOpenAdsorb) {
        IsOpenAdsorb = other.IsOpenAdsorb;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProjectFilePath = input.ReadString();
            break;
          }
          case 18: {
            Version = input.ReadString();
            break;
          }
          case 24: {
            Duration = input.ReadInt32();
            break;
          }
          case 34: {
            tempoList_.AddEntriesFrom(input, _repeated_tempoList_codec);
            break;
          }
          case 42: {
            beatList_.AddEntriesFrom(input, _repeated_beatList_codec);
            break;
          }
          case 50: {
            trackList_.AddEntriesFrom(input, _repeated_trackList_codec);
            break;
          }
          case 58: {
            if (master_ == null) {
              Master = new global::Xstudio.Proto.Master();
            }
            input.ReadMessage(Master);
            break;
          }
          case 66: {
            CurrentTone = input.ReadString();
            break;
          }
          case 72: {
            PianoCells = input.ReadInt32();
            break;
          }
          case 80: {
            LoopStart = input.ReadInt32();
            break;
          }
          case 88: {
            LoopEnd = input.ReadInt32();
            break;
          }
          case 96: {
            IsOpenAdsorb = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ProjectFilePath = input.ReadString();
            break;
          }
          case 18: {
            Version = input.ReadString();
            break;
          }
          case 24: {
            Duration = input.ReadInt32();
            break;
          }
          case 34: {
            tempoList_.AddEntriesFrom(ref input, _repeated_tempoList_codec);
            break;
          }
          case 42: {
            beatList_.AddEntriesFrom(ref input, _repeated_beatList_codec);
            break;
          }
          case 50: {
            trackList_.AddEntriesFrom(ref input, _repeated_trackList_codec);
            break;
          }
          case 58: {
            if (master_ == null) {
              Master = new global::Xstudio.Proto.Master();
            }
            input.ReadMessage(Master);
            break;
          }
          case 66: {
            CurrentTone = input.ReadString();
            break;
          }
          case 72: {
            PianoCells = input.ReadInt32();
            break;
          }
          case 80: {
            LoopStart = input.ReadInt32();
            break;
          }
          case 88: {
            LoopEnd = input.ReadInt32();
            break;
          }
          case 96: {
            IsOpenAdsorb = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SongTempo : pb::IMessage<SongTempo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SongTempo> _parser = new pb::MessageParser<SongTempo>(() => new SongTempo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SongTempo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xstudio.Proto.XstudioModelReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SongTempo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SongTempo(SongTempo other) : this() {
      _hasBits0 = other._hasBits0;
      pos_ = other.pos_;
      tempo_ = other.tempo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SongTempo Clone() {
      return new SongTempo(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private int pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Pos {
      get { if ((_hasBits0 & 1) != 0) { return pos_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        pos_ = value;
      }
    }
    /// <summary>Gets whether the "pos" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPos {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "pos" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPos() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "tempo" field.</summary>
    public const int TempoFieldNumber = 2;
    private int tempo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Tempo {
      get { if ((_hasBits0 & 2) != 0) { return tempo_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        tempo_ = value;
      }
    }
    /// <summary>Gets whether the "tempo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTempo {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "tempo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTempo() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SongTempo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SongTempo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pos != other.Pos) return false;
      if (Tempo != other.Tempo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPos) hash ^= Pos.GetHashCode();
      if (HasTempo) hash ^= Tempo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPos) {
        output.WriteRawTag(8);
        output.WriteInt32(Pos);
      }
      if (HasTempo) {
        output.WriteRawTag(16);
        output.WriteInt32(Tempo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPos) {
        output.WriteRawTag(8);
        output.WriteInt32(Pos);
      }
      if (HasTempo) {
        output.WriteRawTag(16);
        output.WriteInt32(Tempo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasPos) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (HasTempo) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tempo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SongTempo other) {
      if (other == null) {
        return;
      }
      if (other.HasPos) {
        Pos = other.Pos;
      }
      if (other.HasTempo) {
        Tempo = other.Tempo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pos = input.ReadInt32();
            break;
          }
          case 16: {
            Tempo = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Pos = input.ReadInt32();
            break;
          }
          case 16: {
            Tempo = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SongBeat : pb::IMessage<SongBeat>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SongBeat> _parser = new pb::MessageParser<SongBeat>(() => new SongBeat());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SongBeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xstudio.Proto.XstudioModelReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SongBeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SongBeat(SongBeat other) : this() {
      _hasBits0 = other._hasBits0;
      pos_ = other.pos_;
      beatSize_ = other.beatSize_ != null ? other.beatSize_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SongBeat Clone() {
      return new SongBeat(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private int pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Pos {
      get { if ((_hasBits0 & 1) != 0) { return pos_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        pos_ = value;
      }
    }
    /// <summary>Gets whether the "pos" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPos {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "pos" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPos() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "beat_size" field.</summary>
    public const int BeatSizeFieldNumber = 2;
    private global::Xstudio.Proto.BeatSize beatSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Xstudio.Proto.BeatSize BeatSize {
      get { return beatSize_; }
      set {
        beatSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SongBeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SongBeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pos != other.Pos) return false;
      if (!object.Equals(BeatSize, other.BeatSize)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPos) hash ^= Pos.GetHashCode();
      if (beatSize_ != null) hash ^= BeatSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPos) {
        output.WriteRawTag(8);
        output.WriteInt32(Pos);
      }
      if (beatSize_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BeatSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPos) {
        output.WriteRawTag(8);
        output.WriteInt32(Pos);
      }
      if (beatSize_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BeatSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasPos) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (beatSize_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BeatSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SongBeat other) {
      if (other == null) {
        return;
      }
      if (other.HasPos) {
        Pos = other.Pos;
      }
      if (other.beatSize_ != null) {
        if (beatSize_ == null) {
          BeatSize = new global::Xstudio.Proto.BeatSize();
        }
        BeatSize.MergeFrom(other.BeatSize);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pos = input.ReadInt32();
            break;
          }
          case 18: {
            if (beatSize_ == null) {
              BeatSize = new global::Xstudio.Proto.BeatSize();
            }
            input.ReadMessage(BeatSize);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Pos = input.ReadInt32();
            break;
          }
          case 18: {
            if (beatSize_ == null) {
              BeatSize = new global::Xstudio.Proto.BeatSize();
            }
            input.ReadMessage(BeatSize);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BeatSize : pb::IMessage<BeatSize>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BeatSize> _parser = new pb::MessageParser<BeatSize>(() => new BeatSize());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BeatSize> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xstudio.Proto.XstudioModelReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BeatSize() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BeatSize(BeatSize other) : this() {
      _hasBits0 = other._hasBits0;
      numerator_ = other.numerator_;
      denominator_ = other.denominator_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BeatSize Clone() {
      return new BeatSize(this);
    }

    /// <summary>Field number for the "numerator" field.</summary>
    public const int NumeratorFieldNumber = 1;
    private int numerator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Numerator {
      get { if ((_hasBits0 & 1) != 0) { return numerator_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        numerator_ = value;
      }
    }
    /// <summary>Gets whether the "numerator" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNumerator {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "numerator" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNumerator() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "denominator" field.</summary>
    public const int DenominatorFieldNumber = 2;
    private int denominator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Denominator {
      get { if ((_hasBits0 & 2) != 0) { return denominator_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        denominator_ = value;
      }
    }
    /// <summary>Gets whether the "denominator" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDenominator {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "denominator" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDenominator() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BeatSize);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BeatSize other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Numerator != other.Numerator) return false;
      if (Denominator != other.Denominator) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasNumerator) hash ^= Numerator.GetHashCode();
      if (HasDenominator) hash ^= Denominator.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasNumerator) {
        output.WriteRawTag(8);
        output.WriteInt32(Numerator);
      }
      if (HasDenominator) {
        output.WriteRawTag(16);
        output.WriteInt32(Denominator);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasNumerator) {
        output.WriteRawTag(8);
        output.WriteInt32(Numerator);
      }
      if (HasDenominator) {
        output.WriteRawTag(16);
        output.WriteInt32(Denominator);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasNumerator) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Numerator);
      }
      if (HasDenominator) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Denominator);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BeatSize other) {
      if (other == null) {
        return;
      }
      if (other.HasNumerator) {
        Numerator = other.Numerator;
      }
      if (other.HasDenominator) {
        Denominator = other.Denominator;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Numerator = input.ReadInt32();
            break;
          }
          case 16: {
            Denominator = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Numerator = input.ReadInt32();
            break;
          }
          case 16: {
            Denominator = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Master : pb::IMessage<Master>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Master> _parser = new pb::MessageParser<Master>(() => new Master());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Master> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xstudio.Proto.XstudioModelReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Master() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Master(Master other) : this() {
      _hasBits0 = other._hasBits0;
      volume_ = other.volume_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Master Clone() {
      return new Master(this);
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 1;
    private float volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Volume {
      get { if ((_hasBits0 & 1) != 0) { return volume_; } else { return 0F; } }
      set {
        _hasBits0 |= 1;
        volume_ = value;
      }
    }
    /// <summary>Gets whether the "volume" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVolume {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "volume" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVolume() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Master);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Master other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Volume, other.Volume)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasVolume) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Volume);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasVolume) {
        output.WriteRawTag(13);
        output.WriteFloat(Volume);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasVolume) {
        output.WriteRawTag(13);
        output.WriteFloat(Volume);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasVolume) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Master other) {
      if (other == null) {
        return;
      }
      if (other.HasVolume) {
        Volume = other.Volume;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Volume = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Volume = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SingingTrack : pb::IMessage<SingingTrack>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SingingTrack> _parser = new pb::MessageParser<SingingTrack>(() => new SingingTrack());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SingingTrack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xstudio.Proto.XstudioModelReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SingingTrack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SingingTrack(SingingTrack other) : this() {
      _hasBits0 = other._hasBits0;
      volume_ = other.volume_;
      pan_ = other.pan_;
      mute_ = other.mute_;
      name_ = other.name_;
      solo_ = other.solo_;
      color_ = other.color_;
      type_ = other.type_;
      patternList_ = other.patternList_.Clone();
      aiSingerId_ = other.aiSingerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SingingTrack Clone() {
      return new SingingTrack(this);
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 1;
    private float volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Volume {
      get { if ((_hasBits0 & 1) != 0) { return volume_; } else { return 0F; } }
      set {
        _hasBits0 |= 1;
        volume_ = value;
      }
    }
    /// <summary>Gets whether the "volume" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVolume {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "volume" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVolume() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "pan" field.</summary>
    public const int PanFieldNumber = 2;
    private float pan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Pan {
      get { if ((_hasBits0 & 2) != 0) { return pan_; } else { return 0F; } }
      set {
        _hasBits0 |= 2;
        pan_ = value;
      }
    }
    /// <summary>Gets whether the "pan" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPan {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "pan" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPan() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "mute" field.</summary>
    public const int MuteFieldNumber = 3;
    private bool mute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Mute {
      get { if ((_hasBits0 & 4) != 0) { return mute_; } else { return false; } }
      set {
        _hasBits0 |= 4;
        mute_ = value;
      }
    }
    /// <summary>Gets whether the "mute" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMute {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "mute" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMute() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? ""; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "solo" field.</summary>
    public const int SoloFieldNumber = 5;
    private bool solo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Solo {
      get { if ((_hasBits0 & 8) != 0) { return solo_; } else { return false; } }
      set {
        _hasBits0 |= 8;
        solo_ = value;
      }
    }
    /// <summary>Gets whether the "solo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSolo {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "solo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSolo() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 6;
    private string color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Color {
      get { return color_ ?? ""; }
      set {
        color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "color" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasColor {
      get { return color_ != null; }
    }
    /// <summary>Clears the value of the "color" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearColor() {
      color_ = null;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 7;
    private global::Xstudio.Proto.TrackType type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Xstudio.Proto.TrackType Type {
      get { if ((_hasBits0 & 16) != 0) { return type_; } else { return global::Xstudio.Proto.TrackType.TrackNone; } }
      set {
        _hasBits0 |= 16;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasType {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearType() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "pattern_list" field.</summary>
    public const int PatternListFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Xstudio.Proto.SingingPattern> _repeated_patternList_codec
        = pb::FieldCodec.ForMessage(66, global::Xstudio.Proto.SingingPattern.Parser);
    private readonly pbc::RepeatedField<global::Xstudio.Proto.SingingPattern> patternList_ = new pbc::RepeatedField<global::Xstudio.Proto.SingingPattern>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Xstudio.Proto.SingingPattern> PatternList {
      get { return patternList_; }
    }

    /// <summary>Field number for the "ai_singer_id" field.</summary>
    public const int AiSingerIdFieldNumber = 9;
    private string aiSingerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AiSingerId {
      get { return aiSingerId_ ?? ""; }
      set {
        aiSingerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ai_singer_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAiSingerId {
      get { return aiSingerId_ != null; }
    }
    /// <summary>Clears the value of the "ai_singer_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAiSingerId() {
      aiSingerId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SingingTrack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SingingTrack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Volume, other.Volume)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Pan, other.Pan)) return false;
      if (Mute != other.Mute) return false;
      if (Name != other.Name) return false;
      if (Solo != other.Solo) return false;
      if (Color != other.Color) return false;
      if (Type != other.Type) return false;
      if(!patternList_.Equals(other.patternList_)) return false;
      if (AiSingerId != other.AiSingerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasVolume) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Volume);
      if (HasPan) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Pan);
      if (HasMute) hash ^= Mute.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasSolo) hash ^= Solo.GetHashCode();
      if (HasColor) hash ^= Color.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      hash ^= patternList_.GetHashCode();
      if (HasAiSingerId) hash ^= AiSingerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasVolume) {
        output.WriteRawTag(13);
        output.WriteFloat(Volume);
      }
      if (HasPan) {
        output.WriteRawTag(21);
        output.WriteFloat(Pan);
      }
      if (HasMute) {
        output.WriteRawTag(24);
        output.WriteBool(Mute);
      }
      if (HasName) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (HasSolo) {
        output.WriteRawTag(40);
        output.WriteBool(Solo);
      }
      if (HasColor) {
        output.WriteRawTag(50);
        output.WriteString(Color);
      }
      if (HasType) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Type);
      }
      patternList_.WriteTo(output, _repeated_patternList_codec);
      if (HasAiSingerId) {
        output.WriteRawTag(74);
        output.WriteString(AiSingerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasVolume) {
        output.WriteRawTag(13);
        output.WriteFloat(Volume);
      }
      if (HasPan) {
        output.WriteRawTag(21);
        output.WriteFloat(Pan);
      }
      if (HasMute) {
        output.WriteRawTag(24);
        output.WriteBool(Mute);
      }
      if (HasName) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (HasSolo) {
        output.WriteRawTag(40);
        output.WriteBool(Solo);
      }
      if (HasColor) {
        output.WriteRawTag(50);
        output.WriteString(Color);
      }
      if (HasType) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Type);
      }
      patternList_.WriteTo(ref output, _repeated_patternList_codec);
      if (HasAiSingerId) {
        output.WriteRawTag(74);
        output.WriteString(AiSingerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasVolume) {
        size += 1 + 4;
      }
      if (HasPan) {
        size += 1 + 4;
      }
      if (HasMute) {
        size += 1 + 1;
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasSolo) {
        size += 1 + 1;
      }
      if (HasColor) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Color);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += patternList_.CalculateSize(_repeated_patternList_codec);
      if (HasAiSingerId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AiSingerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SingingTrack other) {
      if (other == null) {
        return;
      }
      if (other.HasVolume) {
        Volume = other.Volume;
      }
      if (other.HasPan) {
        Pan = other.Pan;
      }
      if (other.HasMute) {
        Mute = other.Mute;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasSolo) {
        Solo = other.Solo;
      }
      if (other.HasColor) {
        Color = other.Color;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      patternList_.Add(other.patternList_);
      if (other.HasAiSingerId) {
        AiSingerId = other.AiSingerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Volume = input.ReadFloat();
            break;
          }
          case 21: {
            Pan = input.ReadFloat();
            break;
          }
          case 24: {
            Mute = input.ReadBool();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 40: {
            Solo = input.ReadBool();
            break;
          }
          case 50: {
            Color = input.ReadString();
            break;
          }
          case 56: {
            Type = (global::Xstudio.Proto.TrackType) input.ReadEnum();
            break;
          }
          case 66: {
            patternList_.AddEntriesFrom(input, _repeated_patternList_codec);
            break;
          }
          case 74: {
            AiSingerId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Volume = input.ReadFloat();
            break;
          }
          case 21: {
            Pan = input.ReadFloat();
            break;
          }
          case 24: {
            Mute = input.ReadBool();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 40: {
            Solo = input.ReadBool();
            break;
          }
          case 50: {
            Color = input.ReadString();
            break;
          }
          case 56: {
            Type = (global::Xstudio.Proto.TrackType) input.ReadEnum();
            break;
          }
          case 66: {
            patternList_.AddEntriesFrom(ref input, _repeated_patternList_codec);
            break;
          }
          case 74: {
            AiSingerId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AudioTrack : pb::IMessage<AudioTrack>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AudioTrack> _parser = new pb::MessageParser<AudioTrack>(() => new AudioTrack());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AudioTrack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xstudio.Proto.XstudioModelReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AudioTrack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AudioTrack(AudioTrack other) : this() {
      _hasBits0 = other._hasBits0;
      volume_ = other.volume_;
      pan_ = other.pan_;
      mute_ = other.mute_;
      name_ = other.name_;
      solo_ = other.solo_;
      color_ = other.color_;
      type_ = other.type_;
      patternList_ = other.patternList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AudioTrack Clone() {
      return new AudioTrack(this);
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 1;
    private float volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Volume {
      get { if ((_hasBits0 & 1) != 0) { return volume_; } else { return 0F; } }
      set {
        _hasBits0 |= 1;
        volume_ = value;
      }
    }
    /// <summary>Gets whether the "volume" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVolume {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "volume" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVolume() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "pan" field.</summary>
    public const int PanFieldNumber = 2;
    private float pan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Pan {
      get { if ((_hasBits0 & 2) != 0) { return pan_; } else { return 0F; } }
      set {
        _hasBits0 |= 2;
        pan_ = value;
      }
    }
    /// <summary>Gets whether the "pan" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPan {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "pan" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPan() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "mute" field.</summary>
    public const int MuteFieldNumber = 3;
    private bool mute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Mute {
      get { if ((_hasBits0 & 4) != 0) { return mute_; } else { return false; } }
      set {
        _hasBits0 |= 4;
        mute_ = value;
      }
    }
    /// <summary>Gets whether the "mute" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMute {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "mute" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMute() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? ""; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "solo" field.</summary>
    public const int SoloFieldNumber = 5;
    private bool solo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Solo {
      get { if ((_hasBits0 & 8) != 0) { return solo_; } else { return false; } }
      set {
        _hasBits0 |= 8;
        solo_ = value;
      }
    }
    /// <summary>Gets whether the "solo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSolo {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "solo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSolo() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 6;
    private string color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Color {
      get { return color_ ?? ""; }
      set {
        color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "color" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasColor {
      get { return color_ != null; }
    }
    /// <summary>Clears the value of the "color" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearColor() {
      color_ = null;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 7;
    private global::Xstudio.Proto.TrackType type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Xstudio.Proto.TrackType Type {
      get { if ((_hasBits0 & 16) != 0) { return type_; } else { return global::Xstudio.Proto.TrackType.TrackNone; } }
      set {
        _hasBits0 |= 16;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasType {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearType() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "pattern_list" field.</summary>
    public const int PatternListFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Xstudio.Proto.AudioPattern> _repeated_patternList_codec
        = pb::FieldCodec.ForMessage(66, global::Xstudio.Proto.AudioPattern.Parser);
    private readonly pbc::RepeatedField<global::Xstudio.Proto.AudioPattern> patternList_ = new pbc::RepeatedField<global::Xstudio.Proto.AudioPattern>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Xstudio.Proto.AudioPattern> PatternList {
      get { return patternList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AudioTrack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AudioTrack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Volume, other.Volume)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Pan, other.Pan)) return false;
      if (Mute != other.Mute) return false;
      if (Name != other.Name) return false;
      if (Solo != other.Solo) return false;
      if (Color != other.Color) return false;
      if (Type != other.Type) return false;
      if(!patternList_.Equals(other.patternList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasVolume) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Volume);
      if (HasPan) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Pan);
      if (HasMute) hash ^= Mute.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasSolo) hash ^= Solo.GetHashCode();
      if (HasColor) hash ^= Color.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      hash ^= patternList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasVolume) {
        output.WriteRawTag(13);
        output.WriteFloat(Volume);
      }
      if (HasPan) {
        output.WriteRawTag(21);
        output.WriteFloat(Pan);
      }
      if (HasMute) {
        output.WriteRawTag(24);
        output.WriteBool(Mute);
      }
      if (HasName) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (HasSolo) {
        output.WriteRawTag(40);
        output.WriteBool(Solo);
      }
      if (HasColor) {
        output.WriteRawTag(50);
        output.WriteString(Color);
      }
      if (HasType) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Type);
      }
      patternList_.WriteTo(output, _repeated_patternList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasVolume) {
        output.WriteRawTag(13);
        output.WriteFloat(Volume);
      }
      if (HasPan) {
        output.WriteRawTag(21);
        output.WriteFloat(Pan);
      }
      if (HasMute) {
        output.WriteRawTag(24);
        output.WriteBool(Mute);
      }
      if (HasName) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (HasSolo) {
        output.WriteRawTag(40);
        output.WriteBool(Solo);
      }
      if (HasColor) {
        output.WriteRawTag(50);
        output.WriteString(Color);
      }
      if (HasType) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Type);
      }
      patternList_.WriteTo(ref output, _repeated_patternList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasVolume) {
        size += 1 + 4;
      }
      if (HasPan) {
        size += 1 + 4;
      }
      if (HasMute) {
        size += 1 + 1;
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasSolo) {
        size += 1 + 1;
      }
      if (HasColor) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Color);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += patternList_.CalculateSize(_repeated_patternList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AudioTrack other) {
      if (other == null) {
        return;
      }
      if (other.HasVolume) {
        Volume = other.Volume;
      }
      if (other.HasPan) {
        Pan = other.Pan;
      }
      if (other.HasMute) {
        Mute = other.Mute;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasSolo) {
        Solo = other.Solo;
      }
      if (other.HasColor) {
        Color = other.Color;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      patternList_.Add(other.patternList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Volume = input.ReadFloat();
            break;
          }
          case 21: {
            Pan = input.ReadFloat();
            break;
          }
          case 24: {
            Mute = input.ReadBool();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 40: {
            Solo = input.ReadBool();
            break;
          }
          case 50: {
            Color = input.ReadString();
            break;
          }
          case 56: {
            Type = (global::Xstudio.Proto.TrackType) input.ReadEnum();
            break;
          }
          case 66: {
            patternList_.AddEntriesFrom(input, _repeated_patternList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Volume = input.ReadFloat();
            break;
          }
          case 21: {
            Pan = input.ReadFloat();
            break;
          }
          case 24: {
            Mute = input.ReadBool();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 40: {
            Solo = input.ReadBool();
            break;
          }
          case 50: {
            Color = input.ReadString();
            break;
          }
          case 56: {
            Type = (global::Xstudio.Proto.TrackType) input.ReadEnum();
            break;
          }
          case 66: {
            patternList_.AddEntriesFrom(ref input, _repeated_patternList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AudioPattern : pb::IMessage<AudioPattern>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AudioPattern> _parser = new pb::MessageParser<AudioPattern>(() => new AudioPattern());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AudioPattern> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xstudio.Proto.XstudioModelReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AudioPattern() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AudioPattern(AudioPattern other) : this() {
      _hasBits0 = other._hasBits0;
      name_ = other.name_;
      type_ = other.type_;
      realPos_ = other.realPos_;
      realDur_ = other.realDur_;
      playPos_ = other.playPos_;
      playDur_ = other.playDur_;
      isMute_ = other.isMute_;
      audioFilePath_ = other.audioFilePath_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AudioPattern Clone() {
      return new AudioPattern(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? ""; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Xstudio.Proto.PatternType type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Xstudio.Proto.PatternType Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return global::Xstudio.Proto.PatternType.PatternNone; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "real_pos" field.</summary>
    public const int RealPosFieldNumber = 3;
    private int realPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RealPos {
      get { if ((_hasBits0 & 2) != 0) { return realPos_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        realPos_ = value;
      }
    }
    /// <summary>Gets whether the "real_pos" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRealPos {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "real_pos" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRealPos() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "real_dur" field.</summary>
    public const int RealDurFieldNumber = 4;
    private int realDur_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RealDur {
      get { if ((_hasBits0 & 4) != 0) { return realDur_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        realDur_ = value;
      }
    }
    /// <summary>Gets whether the "real_dur" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRealDur {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "real_dur" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRealDur() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "play_pos" field.</summary>
    public const int PlayPosFieldNumber = 5;
    private int playPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PlayPos {
      get { if ((_hasBits0 & 8) != 0) { return playPos_; } else { return 0; } }
      set {
        _hasBits0 |= 8;
        playPos_ = value;
      }
    }
    /// <summary>Gets whether the "play_pos" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPlayPos {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "play_pos" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPlayPos() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "play_dur" field.</summary>
    public const int PlayDurFieldNumber = 6;
    private int playDur_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PlayDur {
      get { if ((_hasBits0 & 16) != 0) { return playDur_; } else { return 0; } }
      set {
        _hasBits0 |= 16;
        playDur_ = value;
      }
    }
    /// <summary>Gets whether the "play_dur" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPlayDur {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "play_dur" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPlayDur() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "is_mute" field.</summary>
    public const int IsMuteFieldNumber = 7;
    private bool isMute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsMute {
      get { if ((_hasBits0 & 32) != 0) { return isMute_; } else { return false; } }
      set {
        _hasBits0 |= 32;
        isMute_ = value;
      }
    }
    /// <summary>Gets whether the "is_mute" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsMute {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "is_mute" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsMute() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "audio_file_path" field.</summary>
    public const int AudioFilePathFieldNumber = 8;
    private string audioFilePath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AudioFilePath {
      get { return audioFilePath_ ?? ""; }
      set {
        audioFilePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "audio_file_path" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAudioFilePath {
      get { return audioFilePath_ != null; }
    }
    /// <summary>Clears the value of the "audio_file_path" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAudioFilePath() {
      audioFilePath_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AudioPattern);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AudioPattern other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (RealPos != other.RealPos) return false;
      if (RealDur != other.RealDur) return false;
      if (PlayPos != other.PlayPos) return false;
      if (PlayDur != other.PlayDur) return false;
      if (IsMute != other.IsMute) return false;
      if (AudioFilePath != other.AudioFilePath) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasRealPos) hash ^= RealPos.GetHashCode();
      if (HasRealDur) hash ^= RealDur.GetHashCode();
      if (HasPlayPos) hash ^= PlayPos.GetHashCode();
      if (HasPlayDur) hash ^= PlayDur.GetHashCode();
      if (HasIsMute) hash ^= IsMute.GetHashCode();
      if (HasAudioFilePath) hash ^= AudioFilePath.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (HasRealPos) {
        output.WriteRawTag(24);
        output.WriteInt32(RealPos);
      }
      if (HasRealDur) {
        output.WriteRawTag(32);
        output.WriteInt32(RealDur);
      }
      if (HasPlayPos) {
        output.WriteRawTag(40);
        output.WriteInt32(PlayPos);
      }
      if (HasPlayDur) {
        output.WriteRawTag(48);
        output.WriteInt32(PlayDur);
      }
      if (HasIsMute) {
        output.WriteRawTag(56);
        output.WriteBool(IsMute);
      }
      if (HasAudioFilePath) {
        output.WriteRawTag(66);
        output.WriteString(AudioFilePath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (HasRealPos) {
        output.WriteRawTag(24);
        output.WriteInt32(RealPos);
      }
      if (HasRealDur) {
        output.WriteRawTag(32);
        output.WriteInt32(RealDur);
      }
      if (HasPlayPos) {
        output.WriteRawTag(40);
        output.WriteInt32(PlayPos);
      }
      if (HasPlayDur) {
        output.WriteRawTag(48);
        output.WriteInt32(PlayDur);
      }
      if (HasIsMute) {
        output.WriteRawTag(56);
        output.WriteBool(IsMute);
      }
      if (HasAudioFilePath) {
        output.WriteRawTag(66);
        output.WriteString(AudioFilePath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasRealPos) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RealPos);
      }
      if (HasRealDur) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RealDur);
      }
      if (HasPlayPos) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayPos);
      }
      if (HasPlayDur) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayDur);
      }
      if (HasIsMute) {
        size += 1 + 1;
      }
      if (HasAudioFilePath) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AudioFilePath);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AudioPattern other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasRealPos) {
        RealPos = other.RealPos;
      }
      if (other.HasRealDur) {
        RealDur = other.RealDur;
      }
      if (other.HasPlayPos) {
        PlayPos = other.PlayPos;
      }
      if (other.HasPlayDur) {
        PlayDur = other.PlayDur;
      }
      if (other.HasIsMute) {
        IsMute = other.IsMute;
      }
      if (other.HasAudioFilePath) {
        AudioFilePath = other.AudioFilePath;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::Xstudio.Proto.PatternType) input.ReadEnum();
            break;
          }
          case 24: {
            RealPos = input.ReadInt32();
            break;
          }
          case 32: {
            RealDur = input.ReadInt32();
            break;
          }
          case 40: {
            PlayPos = input.ReadInt32();
            break;
          }
          case 48: {
            PlayDur = input.ReadInt32();
            break;
          }
          case 56: {
            IsMute = input.ReadBool();
            break;
          }
          case 66: {
            AudioFilePath = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::Xstudio.Proto.PatternType) input.ReadEnum();
            break;
          }
          case 24: {
            RealPos = input.ReadInt32();
            break;
          }
          case 32: {
            RealDur = input.ReadInt32();
            break;
          }
          case 40: {
            PlayPos = input.ReadInt32();
            break;
          }
          case 48: {
            PlayDur = input.ReadInt32();
            break;
          }
          case 56: {
            IsMute = input.ReadBool();
            break;
          }
          case 66: {
            AudioFilePath = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SingingPattern : pb::IMessage<SingingPattern>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SingingPattern> _parser = new pb::MessageParser<SingingPattern>(() => new SingingPattern());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SingingPattern> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xstudio.Proto.XstudioModelReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SingingPattern() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SingingPattern(SingingPattern other) : this() {
      _hasBits0 = other._hasBits0;
      name_ = other.name_;
      type_ = other.type_;
      realPos_ = other.realPos_;
      realDur_ = other.realDur_;
      playPos_ = other.playPos_;
      playDur_ = other.playDur_;
      isMute_ = other.isMute_;
      noteList_ = other.noteList_.Clone();
      editedPitchLine_ = other.editedPitchLine_.Clone();
      editedVolumeLine_ = other.editedVolumeLine_.Clone();
      editedPowerLine_ = other.editedPowerLine_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SingingPattern Clone() {
      return new SingingPattern(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? ""; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Xstudio.Proto.PatternType type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Xstudio.Proto.PatternType Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return global::Xstudio.Proto.PatternType.PatternNone; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "real_pos" field.</summary>
    public const int RealPosFieldNumber = 3;
    private int realPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RealPos {
      get { if ((_hasBits0 & 2) != 0) { return realPos_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        realPos_ = value;
      }
    }
    /// <summary>Gets whether the "real_pos" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRealPos {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "real_pos" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRealPos() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "real_dur" field.</summary>
    public const int RealDurFieldNumber = 4;
    private int realDur_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RealDur {
      get { if ((_hasBits0 & 4) != 0) { return realDur_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        realDur_ = value;
      }
    }
    /// <summary>Gets whether the "real_dur" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRealDur {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "real_dur" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRealDur() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "play_pos" field.</summary>
    public const int PlayPosFieldNumber = 5;
    private int playPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PlayPos {
      get { if ((_hasBits0 & 8) != 0) { return playPos_; } else { return 0; } }
      set {
        _hasBits0 |= 8;
        playPos_ = value;
      }
    }
    /// <summary>Gets whether the "play_pos" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPlayPos {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "play_pos" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPlayPos() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "play_dur" field.</summary>
    public const int PlayDurFieldNumber = 6;
    private int playDur_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PlayDur {
      get { if ((_hasBits0 & 16) != 0) { return playDur_; } else { return 0; } }
      set {
        _hasBits0 |= 16;
        playDur_ = value;
      }
    }
    /// <summary>Gets whether the "play_dur" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPlayDur {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "play_dur" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPlayDur() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "is_mute" field.</summary>
    public const int IsMuteFieldNumber = 7;
    private bool isMute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsMute {
      get { if ((_hasBits0 & 32) != 0) { return isMute_; } else { return false; } }
      set {
        _hasBits0 |= 32;
        isMute_ = value;
      }
    }
    /// <summary>Gets whether the "is_mute" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsMute {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "is_mute" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsMute() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "note_List" field.</summary>
    public const int NoteListFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Xstudio.Proto.Note> _repeated_noteList_codec
        = pb::FieldCodec.ForMessage(66, global::Xstudio.Proto.Note.Parser);
    private readonly pbc::RepeatedField<global::Xstudio.Proto.Note> noteList_ = new pbc::RepeatedField<global::Xstudio.Proto.Note>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Xstudio.Proto.Note> NoteList {
      get { return noteList_; }
    }

    /// <summary>Field number for the "edited_pitch_line" field.</summary>
    public const int EditedPitchLineFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Xstudio.Proto.LineParamNode> _repeated_editedPitchLine_codec
        = pb::FieldCodec.ForMessage(74, global::Xstudio.Proto.LineParamNode.Parser);
    private readonly pbc::RepeatedField<global::Xstudio.Proto.LineParamNode> editedPitchLine_ = new pbc::RepeatedField<global::Xstudio.Proto.LineParamNode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Xstudio.Proto.LineParamNode> EditedPitchLine {
      get { return editedPitchLine_; }
    }

    /// <summary>Field number for the "edited_volume_line" field.</summary>
    public const int EditedVolumeLineFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Xstudio.Proto.LineParamNode> _repeated_editedVolumeLine_codec
        = pb::FieldCodec.ForMessage(82, global::Xstudio.Proto.LineParamNode.Parser);
    private readonly pbc::RepeatedField<global::Xstudio.Proto.LineParamNode> editedVolumeLine_ = new pbc::RepeatedField<global::Xstudio.Proto.LineParamNode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Xstudio.Proto.LineParamNode> EditedVolumeLine {
      get { return editedVolumeLine_; }
    }

    /// <summary>Field number for the "edited_power_line" field.</summary>
    public const int EditedPowerLineFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Xstudio.Proto.LineParamNode> _repeated_editedPowerLine_codec
        = pb::FieldCodec.ForMessage(90, global::Xstudio.Proto.LineParamNode.Parser);
    private readonly pbc::RepeatedField<global::Xstudio.Proto.LineParamNode> editedPowerLine_ = new pbc::RepeatedField<global::Xstudio.Proto.LineParamNode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Xstudio.Proto.LineParamNode> EditedPowerLine {
      get { return editedPowerLine_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SingingPattern);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SingingPattern other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (RealPos != other.RealPos) return false;
      if (RealDur != other.RealDur) return false;
      if (PlayPos != other.PlayPos) return false;
      if (PlayDur != other.PlayDur) return false;
      if (IsMute != other.IsMute) return false;
      if(!noteList_.Equals(other.noteList_)) return false;
      if(!editedPitchLine_.Equals(other.editedPitchLine_)) return false;
      if(!editedVolumeLine_.Equals(other.editedVolumeLine_)) return false;
      if(!editedPowerLine_.Equals(other.editedPowerLine_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasRealPos) hash ^= RealPos.GetHashCode();
      if (HasRealDur) hash ^= RealDur.GetHashCode();
      if (HasPlayPos) hash ^= PlayPos.GetHashCode();
      if (HasPlayDur) hash ^= PlayDur.GetHashCode();
      if (HasIsMute) hash ^= IsMute.GetHashCode();
      hash ^= noteList_.GetHashCode();
      hash ^= editedPitchLine_.GetHashCode();
      hash ^= editedVolumeLine_.GetHashCode();
      hash ^= editedPowerLine_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (HasRealPos) {
        output.WriteRawTag(24);
        output.WriteInt32(RealPos);
      }
      if (HasRealDur) {
        output.WriteRawTag(32);
        output.WriteInt32(RealDur);
      }
      if (HasPlayPos) {
        output.WriteRawTag(40);
        output.WriteInt32(PlayPos);
      }
      if (HasPlayDur) {
        output.WriteRawTag(48);
        output.WriteInt32(PlayDur);
      }
      if (HasIsMute) {
        output.WriteRawTag(56);
        output.WriteBool(IsMute);
      }
      noteList_.WriteTo(output, _repeated_noteList_codec);
      editedPitchLine_.WriteTo(output, _repeated_editedPitchLine_codec);
      editedVolumeLine_.WriteTo(output, _repeated_editedVolumeLine_codec);
      editedPowerLine_.WriteTo(output, _repeated_editedPowerLine_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (HasRealPos) {
        output.WriteRawTag(24);
        output.WriteInt32(RealPos);
      }
      if (HasRealDur) {
        output.WriteRawTag(32);
        output.WriteInt32(RealDur);
      }
      if (HasPlayPos) {
        output.WriteRawTag(40);
        output.WriteInt32(PlayPos);
      }
      if (HasPlayDur) {
        output.WriteRawTag(48);
        output.WriteInt32(PlayDur);
      }
      if (HasIsMute) {
        output.WriteRawTag(56);
        output.WriteBool(IsMute);
      }
      noteList_.WriteTo(ref output, _repeated_noteList_codec);
      editedPitchLine_.WriteTo(ref output, _repeated_editedPitchLine_codec);
      editedVolumeLine_.WriteTo(ref output, _repeated_editedVolumeLine_codec);
      editedPowerLine_.WriteTo(ref output, _repeated_editedPowerLine_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasRealPos) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RealPos);
      }
      if (HasRealDur) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RealDur);
      }
      if (HasPlayPos) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayPos);
      }
      if (HasPlayDur) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayDur);
      }
      if (HasIsMute) {
        size += 1 + 1;
      }
      size += noteList_.CalculateSize(_repeated_noteList_codec);
      size += editedPitchLine_.CalculateSize(_repeated_editedPitchLine_codec);
      size += editedVolumeLine_.CalculateSize(_repeated_editedVolumeLine_codec);
      size += editedPowerLine_.CalculateSize(_repeated_editedPowerLine_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SingingPattern other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasRealPos) {
        RealPos = other.RealPos;
      }
      if (other.HasRealDur) {
        RealDur = other.RealDur;
      }
      if (other.HasPlayPos) {
        PlayPos = other.PlayPos;
      }
      if (other.HasPlayDur) {
        PlayDur = other.PlayDur;
      }
      if (other.HasIsMute) {
        IsMute = other.IsMute;
      }
      noteList_.Add(other.noteList_);
      editedPitchLine_.Add(other.editedPitchLine_);
      editedVolumeLine_.Add(other.editedVolumeLine_);
      editedPowerLine_.Add(other.editedPowerLine_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::Xstudio.Proto.PatternType) input.ReadEnum();
            break;
          }
          case 24: {
            RealPos = input.ReadInt32();
            break;
          }
          case 32: {
            RealDur = input.ReadInt32();
            break;
          }
          case 40: {
            PlayPos = input.ReadInt32();
            break;
          }
          case 48: {
            PlayDur = input.ReadInt32();
            break;
          }
          case 56: {
            IsMute = input.ReadBool();
            break;
          }
          case 66: {
            noteList_.AddEntriesFrom(input, _repeated_noteList_codec);
            break;
          }
          case 74: {
            editedPitchLine_.AddEntriesFrom(input, _repeated_editedPitchLine_codec);
            break;
          }
          case 82: {
            editedVolumeLine_.AddEntriesFrom(input, _repeated_editedVolumeLine_codec);
            break;
          }
          case 90: {
            editedPowerLine_.AddEntriesFrom(input, _repeated_editedPowerLine_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::Xstudio.Proto.PatternType) input.ReadEnum();
            break;
          }
          case 24: {
            RealPos = input.ReadInt32();
            break;
          }
          case 32: {
            RealDur = input.ReadInt32();
            break;
          }
          case 40: {
            PlayPos = input.ReadInt32();
            break;
          }
          case 48: {
            PlayDur = input.ReadInt32();
            break;
          }
          case 56: {
            IsMute = input.ReadBool();
            break;
          }
          case 66: {
            noteList_.AddEntriesFrom(ref input, _repeated_noteList_codec);
            break;
          }
          case 74: {
            editedPitchLine_.AddEntriesFrom(ref input, _repeated_editedPitchLine_codec);
            break;
          }
          case 82: {
            editedVolumeLine_.AddEntriesFrom(ref input, _repeated_editedVolumeLine_codec);
            break;
          }
          case 90: {
            editedPowerLine_.AddEntriesFrom(ref input, _repeated_editedPowerLine_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Note : pb::IMessage<Note>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Note> _parser = new pb::MessageParser<Note>(() => new Note());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Note> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xstudio.Proto.XstudioModelReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Note() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Note(Note other) : this() {
      _hasBits0 = other._hasBits0;
      startPos_ = other.startPos_;
      widthPos_ = other.widthPos_;
      keyIndex_ = other.keyIndex_;
      lyric_ = other.lyric_;
      pronouncing_ = other.pronouncing_;
      consonantLen_ = other.consonantLen_;
      hasConsonant_ = other.hasConsonant_;
      userConsonantLen_ = other.userConsonantLen_;
      spLen_ = other.spLen_;
      silLen_ = other.silLen_;
      lengthValidateTag_ = other.lengthValidateTag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Note Clone() {
      return new Note(this);
    }

    /// <summary>Field number for the "start_pos" field.</summary>
    public const int StartPosFieldNumber = 1;
    private int startPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StartPos {
      get { if ((_hasBits0 & 1) != 0) { return startPos_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        startPos_ = value;
      }
    }
    /// <summary>Gets whether the "start_pos" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStartPos {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "start_pos" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStartPos() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "width_pos" field.</summary>
    public const int WidthPosFieldNumber = 2;
    private int widthPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WidthPos {
      get { if ((_hasBits0 & 2) != 0) { return widthPos_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        widthPos_ = value;
      }
    }
    /// <summary>Gets whether the "width_pos" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWidthPos {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "width_pos" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWidthPos() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "key_index" field.</summary>
    public const int KeyIndexFieldNumber = 3;
    private int keyIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int KeyIndex {
      get { if ((_hasBits0 & 4) != 0) { return keyIndex_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        keyIndex_ = value;
      }
    }
    /// <summary>Gets whether the "key_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasKeyIndex {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "key_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearKeyIndex() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "lyric" field.</summary>
    public const int LyricFieldNumber = 4;
    private string lyric_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Lyric {
      get { return lyric_ ?? ""; }
      set {
        lyric_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "lyric" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLyric {
      get { return lyric_ != null; }
    }
    /// <summary>Clears the value of the "lyric" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLyric() {
      lyric_ = null;
    }

    /// <summary>Field number for the "pronouncing" field.</summary>
    public const int PronouncingFieldNumber = 5;
    private string pronouncing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Pronouncing {
      get { return pronouncing_ ?? ""; }
      set {
        pronouncing_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "pronouncing" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPronouncing {
      get { return pronouncing_ != null; }
    }
    /// <summary>Clears the value of the "pronouncing" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPronouncing() {
      pronouncing_ = null;
    }

    /// <summary>Field number for the "consonant_len" field.</summary>
    public const int ConsonantLenFieldNumber = 6;
    private int consonantLen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ConsonantLen {
      get { if ((_hasBits0 & 8) != 0) { return consonantLen_; } else { return 0; } }
      set {
        _hasBits0 |= 8;
        consonantLen_ = value;
      }
    }
    /// <summary>Gets whether the "consonant_len" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConsonantLen {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "consonant_len" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConsonantLen() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "has_consonant" field.</summary>
    public const int HasConsonantFieldNumber = 7;
    private bool hasConsonant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConsonant {
      get { if ((_hasBits0 & 16) != 0) { return hasConsonant_; } else { return false; } }
      set {
        _hasBits0 |= 16;
        hasConsonant_ = value;
      }
    }
    /// <summary>Gets whether the "has_consonant" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasConsonant {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "has_consonant" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasConsonant() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "user_consonant_len" field.</summary>
    public const int UserConsonantLenFieldNumber = 8;
    private int userConsonantLen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UserConsonantLen {
      get { if ((_hasBits0 & 32) != 0) { return userConsonantLen_; } else { return 0; } }
      set {
        _hasBits0 |= 32;
        userConsonantLen_ = value;
      }
    }
    /// <summary>Gets whether the "user_consonant_len" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUserConsonantLen {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "user_consonant_len" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUserConsonantLen() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "sp_len" field.</summary>
    public const int SpLenFieldNumber = 9;
    private int spLen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpLen {
      get { if ((_hasBits0 & 64) != 0) { return spLen_; } else { return 0; } }
      set {
        _hasBits0 |= 64;
        spLen_ = value;
      }
    }
    /// <summary>Gets whether the "sp_len" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSpLen {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "sp_len" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSpLen() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "sil_len" field.</summary>
    public const int SilLenFieldNumber = 10;
    private int silLen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SilLen {
      get { if ((_hasBits0 & 128) != 0) { return silLen_; } else { return 0; } }
      set {
        _hasBits0 |= 128;
        silLen_ = value;
      }
    }
    /// <summary>Gets whether the "sil_len" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSilLen {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "sil_len" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSilLen() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "length_validate_tag" field.</summary>
    public const int LengthValidateTagFieldNumber = 11;
    private global::Xstudio.Proto.NoteLengthValidateTag lengthValidateTag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Xstudio.Proto.NoteLengthValidateTag LengthValidateTag {
      get { if ((_hasBits0 & 256) != 0) { return lengthValidateTag_; } else { return global::Xstudio.Proto.NoteLengthValidateTag.None; } }
      set {
        _hasBits0 |= 256;
        lengthValidateTag_ = value;
      }
    }
    /// <summary>Gets whether the "length_validate_tag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLengthValidateTag {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "length_validate_tag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLengthValidateTag() {
      _hasBits0 &= ~256;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Note);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Note other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartPos != other.StartPos) return false;
      if (WidthPos != other.WidthPos) return false;
      if (KeyIndex != other.KeyIndex) return false;
      if (Lyric != other.Lyric) return false;
      if (Pronouncing != other.Pronouncing) return false;
      if (ConsonantLen != other.ConsonantLen) return false;
      if (HasConsonant != other.HasConsonant) return false;
      if (UserConsonantLen != other.UserConsonantLen) return false;
      if (SpLen != other.SpLen) return false;
      if (SilLen != other.SilLen) return false;
      if (LengthValidateTag != other.LengthValidateTag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStartPos) hash ^= StartPos.GetHashCode();
      if (HasWidthPos) hash ^= WidthPos.GetHashCode();
      if (HasKeyIndex) hash ^= KeyIndex.GetHashCode();
      if (HasLyric) hash ^= Lyric.GetHashCode();
      if (HasPronouncing) hash ^= Pronouncing.GetHashCode();
      if (HasConsonantLen) hash ^= ConsonantLen.GetHashCode();
      if (HasHasConsonant) hash ^= HasConsonant.GetHashCode();
      if (HasUserConsonantLen) hash ^= UserConsonantLen.GetHashCode();
      if (HasSpLen) hash ^= SpLen.GetHashCode();
      if (HasSilLen) hash ^= SilLen.GetHashCode();
      if (HasLengthValidateTag) hash ^= LengthValidateTag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStartPos) {
        output.WriteRawTag(8);
        output.WriteInt32(StartPos);
      }
      if (HasWidthPos) {
        output.WriteRawTag(16);
        output.WriteInt32(WidthPos);
      }
      if (HasKeyIndex) {
        output.WriteRawTag(24);
        output.WriteInt32(KeyIndex);
      }
      if (HasLyric) {
        output.WriteRawTag(34);
        output.WriteString(Lyric);
      }
      if (HasPronouncing) {
        output.WriteRawTag(42);
        output.WriteString(Pronouncing);
      }
      if (HasConsonantLen) {
        output.WriteRawTag(48);
        output.WriteInt32(ConsonantLen);
      }
      if (HasHasConsonant) {
        output.WriteRawTag(56);
        output.WriteBool(HasConsonant);
      }
      if (HasUserConsonantLen) {
        output.WriteRawTag(64);
        output.WriteInt32(UserConsonantLen);
      }
      if (HasSpLen) {
        output.WriteRawTag(72);
        output.WriteInt32(SpLen);
      }
      if (HasSilLen) {
        output.WriteRawTag(80);
        output.WriteInt32(SilLen);
      }
      if (HasLengthValidateTag) {
        output.WriteRawTag(88);
        output.WriteEnum((int) LengthValidateTag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStartPos) {
        output.WriteRawTag(8);
        output.WriteInt32(StartPos);
      }
      if (HasWidthPos) {
        output.WriteRawTag(16);
        output.WriteInt32(WidthPos);
      }
      if (HasKeyIndex) {
        output.WriteRawTag(24);
        output.WriteInt32(KeyIndex);
      }
      if (HasLyric) {
        output.WriteRawTag(34);
        output.WriteString(Lyric);
      }
      if (HasPronouncing) {
        output.WriteRawTag(42);
        output.WriteString(Pronouncing);
      }
      if (HasConsonantLen) {
        output.WriteRawTag(48);
        output.WriteInt32(ConsonantLen);
      }
      if (HasHasConsonant) {
        output.WriteRawTag(56);
        output.WriteBool(HasConsonant);
      }
      if (HasUserConsonantLen) {
        output.WriteRawTag(64);
        output.WriteInt32(UserConsonantLen);
      }
      if (HasSpLen) {
        output.WriteRawTag(72);
        output.WriteInt32(SpLen);
      }
      if (HasSilLen) {
        output.WriteRawTag(80);
        output.WriteInt32(SilLen);
      }
      if (HasLengthValidateTag) {
        output.WriteRawTag(88);
        output.WriteEnum((int) LengthValidateTag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasStartPos) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartPos);
      }
      if (HasWidthPos) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WidthPos);
      }
      if (HasKeyIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KeyIndex);
      }
      if (HasLyric) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lyric);
      }
      if (HasPronouncing) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pronouncing);
      }
      if (HasConsonantLen) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConsonantLen);
      }
      if (HasHasConsonant) {
        size += 1 + 1;
      }
      if (HasUserConsonantLen) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserConsonantLen);
      }
      if (HasSpLen) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpLen);
      }
      if (HasSilLen) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SilLen);
      }
      if (HasLengthValidateTag) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LengthValidateTag);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Note other) {
      if (other == null) {
        return;
      }
      if (other.HasStartPos) {
        StartPos = other.StartPos;
      }
      if (other.HasWidthPos) {
        WidthPos = other.WidthPos;
      }
      if (other.HasKeyIndex) {
        KeyIndex = other.KeyIndex;
      }
      if (other.HasLyric) {
        Lyric = other.Lyric;
      }
      if (other.HasPronouncing) {
        Pronouncing = other.Pronouncing;
      }
      if (other.HasConsonantLen) {
        ConsonantLen = other.ConsonantLen;
      }
      if (other.HasHasConsonant) {
        HasConsonant = other.HasConsonant;
      }
      if (other.HasUserConsonantLen) {
        UserConsonantLen = other.UserConsonantLen;
      }
      if (other.HasSpLen) {
        SpLen = other.SpLen;
      }
      if (other.HasSilLen) {
        SilLen = other.SilLen;
      }
      if (other.HasLengthValidateTag) {
        LengthValidateTag = other.LengthValidateTag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartPos = input.ReadInt32();
            break;
          }
          case 16: {
            WidthPos = input.ReadInt32();
            break;
          }
          case 24: {
            KeyIndex = input.ReadInt32();
            break;
          }
          case 34: {
            Lyric = input.ReadString();
            break;
          }
          case 42: {
            Pronouncing = input.ReadString();
            break;
          }
          case 48: {
            ConsonantLen = input.ReadInt32();
            break;
          }
          case 56: {
            HasConsonant = input.ReadBool();
            break;
          }
          case 64: {
            UserConsonantLen = input.ReadInt32();
            break;
          }
          case 72: {
            SpLen = input.ReadInt32();
            break;
          }
          case 80: {
            SilLen = input.ReadInt32();
            break;
          }
          case 88: {
            LengthValidateTag = (global::Xstudio.Proto.NoteLengthValidateTag) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StartPos = input.ReadInt32();
            break;
          }
          case 16: {
            WidthPos = input.ReadInt32();
            break;
          }
          case 24: {
            KeyIndex = input.ReadInt32();
            break;
          }
          case 34: {
            Lyric = input.ReadString();
            break;
          }
          case 42: {
            Pronouncing = input.ReadString();
            break;
          }
          case 48: {
            ConsonantLen = input.ReadInt32();
            break;
          }
          case 56: {
            HasConsonant = input.ReadBool();
            break;
          }
          case 64: {
            UserConsonantLen = input.ReadInt32();
            break;
          }
          case 72: {
            SpLen = input.ReadInt32();
            break;
          }
          case 80: {
            SilLen = input.ReadInt32();
            break;
          }
          case 88: {
            LengthValidateTag = (global::Xstudio.Proto.NoteLengthValidateTag) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class VibratoStyle : pb::IMessage<VibratoStyle>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VibratoStyle> _parser = new pb::MessageParser<VibratoStyle>(() => new VibratoStyle());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<VibratoStyle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xstudio.Proto.XstudioModelReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VibratoStyle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VibratoStyle(VibratoStyle other) : this() {
      _hasBits0 = other._hasBits0;
      isAntiPhase_ = other.isAntiPhase_;
      ampLine_ = other.ampLine_.Clone();
      freqLine_ = other.freqLine_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VibratoStyle Clone() {
      return new VibratoStyle(this);
    }

    /// <summary>Field number for the "is_anti_phase" field.</summary>
    public const int IsAntiPhaseFieldNumber = 1;
    private bool isAntiPhase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAntiPhase {
      get { if ((_hasBits0 & 1) != 0) { return isAntiPhase_; } else { return false; } }
      set {
        _hasBits0 |= 1;
        isAntiPhase_ = value;
      }
    }
    /// <summary>Gets whether the "is_anti_phase" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAntiPhase {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_anti_phase" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAntiPhase() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "amp_line" field.</summary>
    public const int AmpLineFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xstudio.Proto.LineParamNode> _repeated_ampLine_codec
        = pb::FieldCodec.ForMessage(18, global::Xstudio.Proto.LineParamNode.Parser);
    private readonly pbc::RepeatedField<global::Xstudio.Proto.LineParamNode> ampLine_ = new pbc::RepeatedField<global::Xstudio.Proto.LineParamNode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Xstudio.Proto.LineParamNode> AmpLine {
      get { return ampLine_; }
    }

    /// <summary>Field number for the "freq_line" field.</summary>
    public const int FreqLineFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Xstudio.Proto.LineParamNode> _repeated_freqLine_codec
        = pb::FieldCodec.ForMessage(26, global::Xstudio.Proto.LineParamNode.Parser);
    private readonly pbc::RepeatedField<global::Xstudio.Proto.LineParamNode> freqLine_ = new pbc::RepeatedField<global::Xstudio.Proto.LineParamNode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Xstudio.Proto.LineParamNode> FreqLine {
      get { return freqLine_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as VibratoStyle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(VibratoStyle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsAntiPhase != other.IsAntiPhase) return false;
      if(!ampLine_.Equals(other.ampLine_)) return false;
      if(!freqLine_.Equals(other.freqLine_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIsAntiPhase) hash ^= IsAntiPhase.GetHashCode();
      hash ^= ampLine_.GetHashCode();
      hash ^= freqLine_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasIsAntiPhase) {
        output.WriteRawTag(8);
        output.WriteBool(IsAntiPhase);
      }
      ampLine_.WriteTo(output, _repeated_ampLine_codec);
      freqLine_.WriteTo(output, _repeated_freqLine_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasIsAntiPhase) {
        output.WriteRawTag(8);
        output.WriteBool(IsAntiPhase);
      }
      ampLine_.WriteTo(ref output, _repeated_ampLine_codec);
      freqLine_.WriteTo(ref output, _repeated_freqLine_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasIsAntiPhase) {
        size += 1 + 1;
      }
      size += ampLine_.CalculateSize(_repeated_ampLine_codec);
      size += freqLine_.CalculateSize(_repeated_freqLine_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(VibratoStyle other) {
      if (other == null) {
        return;
      }
      if (other.HasIsAntiPhase) {
        IsAntiPhase = other.IsAntiPhase;
      }
      ampLine_.Add(other.ampLine_);
      freqLine_.Add(other.freqLine_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsAntiPhase = input.ReadBool();
            break;
          }
          case 18: {
            ampLine_.AddEntriesFrom(input, _repeated_ampLine_codec);
            break;
          }
          case 26: {
            freqLine_.AddEntriesFrom(input, _repeated_freqLine_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsAntiPhase = input.ReadBool();
            break;
          }
          case 18: {
            ampLine_.AddEntriesFrom(ref input, _repeated_ampLine_codec);
            break;
          }
          case 26: {
            freqLine_.AddEntriesFrom(ref input, _repeated_freqLine_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class VibratoPercentInfo : pb::IMessage<VibratoPercentInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VibratoPercentInfo> _parser = new pb::MessageParser<VibratoPercentInfo>(() => new VibratoPercentInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<VibratoPercentInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xstudio.Proto.XstudioModelReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VibratoPercentInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VibratoPercentInfo(VibratoPercentInfo other) : this() {
      _hasBits0 = other._hasBits0;
      startPercent_ = other.startPercent_;
      endPercent_ = other.endPercent_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VibratoPercentInfo Clone() {
      return new VibratoPercentInfo(this);
    }

    /// <summary>Field number for the "start_percent" field.</summary>
    public const int StartPercentFieldNumber = 1;
    private float startPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float StartPercent {
      get { if ((_hasBits0 & 1) != 0) { return startPercent_; } else { return 0F; } }
      set {
        _hasBits0 |= 1;
        startPercent_ = value;
      }
    }
    /// <summary>Gets whether the "start_percent" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStartPercent {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "start_percent" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStartPercent() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "end_percent" field.</summary>
    public const int EndPercentFieldNumber = 2;
    private float endPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float EndPercent {
      get { if ((_hasBits0 & 2) != 0) { return endPercent_; } else { return 0F; } }
      set {
        _hasBits0 |= 2;
        endPercent_ = value;
      }
    }
    /// <summary>Gets whether the "end_percent" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEndPercent {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "end_percent" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEndPercent() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as VibratoPercentInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(VibratoPercentInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StartPercent, other.StartPercent)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EndPercent, other.EndPercent)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStartPercent) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StartPercent);
      if (HasEndPercent) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EndPercent);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStartPercent) {
        output.WriteRawTag(13);
        output.WriteFloat(StartPercent);
      }
      if (HasEndPercent) {
        output.WriteRawTag(21);
        output.WriteFloat(EndPercent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStartPercent) {
        output.WriteRawTag(13);
        output.WriteFloat(StartPercent);
      }
      if (HasEndPercent) {
        output.WriteRawTag(21);
        output.WriteFloat(EndPercent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasStartPercent) {
        size += 1 + 4;
      }
      if (HasEndPercent) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(VibratoPercentInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasStartPercent) {
        StartPercent = other.StartPercent;
      }
      if (other.HasEndPercent) {
        EndPercent = other.EndPercent;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            StartPercent = input.ReadFloat();
            break;
          }
          case 21: {
            EndPercent = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            StartPercent = input.ReadFloat();
            break;
          }
          case 21: {
            EndPercent = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LineParamNode : pb::IMessage<LineParamNode>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LineParamNode> _parser = new pb::MessageParser<LineParamNode>(() => new LineParamNode());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LineParamNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xstudio.Proto.XstudioModelReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LineParamNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LineParamNode(LineParamNode other) : this() {
      _hasBits0 = other._hasBits0;
      pos_ = other.pos_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LineParamNode Clone() {
      return new LineParamNode(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private int pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Pos {
      get { if ((_hasBits0 & 1) != 0) { return pos_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        pos_ = value;
      }
    }
    /// <summary>Gets whether the "pos" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPos {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "pos" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPos() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private float value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Value {
      get { if ((_hasBits0 & 2) != 0) { return value_; } else { return 0F; } }
      set {
        _hasBits0 |= 2;
        value_ = value;
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasValue {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearValue() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LineParamNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LineParamNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pos != other.Pos) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPos) hash ^= Pos.GetHashCode();
      if (HasValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPos) {
        output.WriteRawTag(8);
        output.WriteSInt32(Pos);
      }
      if (HasValue) {
        output.WriteRawTag(21);
        output.WriteFloat(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPos) {
        output.WriteRawTag(8);
        output.WriteSInt32(Pos);
      }
      if (HasValue) {
        output.WriteRawTag(21);
        output.WriteFloat(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasPos) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Pos);
      }
      if (HasValue) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LineParamNode other) {
      if (other == null) {
        return;
      }
      if (other.HasPos) {
        Pos = other.Pos;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pos = input.ReadSInt32();
            break;
          }
          case 21: {
            Value = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Pos = input.ReadSInt32();
            break;
          }
          case 21: {
            Value = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
